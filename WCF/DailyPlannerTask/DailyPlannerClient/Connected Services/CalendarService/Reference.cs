//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DailyPlannerClient.CalendarService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Calendar", Namespace="http://schemas.datacontract.org/2004/07/DailyPlannerService")]
    [System.SerializableAttribute()]
    public partial class Calendar : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DailyPlannerClient.CalendarService.CalendarItem[] ItemsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DailyPlannerClient.CalendarService.CalendarItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalendarItem", Namespace="http://schemas.datacontract.org/2004/07/DailyPlannerService")]
    [System.SerializableAttribute()]
    public partial class CalendarItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ItemsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserItem", Namespace="http://schemas.datacontract.org/2004/07/DailyPlannerService")]
    [System.SerializableAttribute()]
    public partial class UserItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndHourIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartHourIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndHourIndex {
            get {
                return this.EndHourIndexField;
            }
            set {
                if ((this.EndHourIndexField.Equals(value) != true)) {
                    this.EndHourIndexField = value;
                    this.RaisePropertyChanged("EndHourIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartHourIndex {
            get {
                return this.StartHourIndexField;
            }
            set {
                if ((this.StartHourIndexField.Equals(value) != true)) {
                    this.StartHourIndexField = value;
                    this.RaisePropertyChanged("StartHourIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalendarService.ICalendarService")]
    public interface ICalendarService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendarService/GetData", ReplyAction="http://tempuri.org/ICalendarService/GetDataResponse")]
        DailyPlannerClient.CalendarService.Calendar GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendarService/GetData", ReplyAction="http://tempuri.org/ICalendarService/GetDataResponse")]
        System.Threading.Tasks.Task<DailyPlannerClient.CalendarService.Calendar> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendarService/SendData", ReplyAction="http://tempuri.org/ICalendarService/SendDataResponse")]
        void SendData(DailyPlannerClient.CalendarService.UserItem userItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalendarService/SendData", ReplyAction="http://tempuri.org/ICalendarService/SendDataResponse")]
        System.Threading.Tasks.Task SendDataAsync(DailyPlannerClient.CalendarService.UserItem userItem);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalendarServiceChannel : DailyPlannerClient.CalendarService.ICalendarService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalendarServiceClient : System.ServiceModel.ClientBase<DailyPlannerClient.CalendarService.ICalendarService>, DailyPlannerClient.CalendarService.ICalendarService {
        
        public CalendarServiceClient() {
        }
        
        public CalendarServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalendarServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalendarServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalendarServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DailyPlannerClient.CalendarService.Calendar GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<DailyPlannerClient.CalendarService.Calendar> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public void SendData(DailyPlannerClient.CalendarService.UserItem userItem) {
            base.Channel.SendData(userItem);
        }
        
        public System.Threading.Tasks.Task SendDataAsync(DailyPlannerClient.CalendarService.UserItem userItem) {
            return base.Channel.SendDataAsync(userItem);
        }
    }
}
